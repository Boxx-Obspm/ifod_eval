%%----------------HEADER---------------------------%%
%Author:           Boris Segret
%Version & Date:
%                  V2.4 17-03-2017 (dd-mm-yyyy)
%                  - minor - and dirty - adaptations to extract the acceleration
%                  V2.3 08-08-2016 (dd-mm-yyyy)
%                  - adaptations to N = 5 measurement (X19 to X26)
%                  V2.2 31-03-2016 (dd-mm-yyyy)
%                  - use direct epochs values instead of indices
%                  (agregates former "test_interpolation" and "Calculate_Xexpected")
%                  V2.1 05-02-2016 (dd-mm-yyyy), Boris Segret
%                  - *no* call to reference_trajectory.m
%                  - *no* changes of the inputs
%                  until V2 11-09-2015 Oussema SLEIMI & Tristan Mallet
% CL=1
%
% Ideally the ifod should return X19 as given here from the knownledge of both
% the ref. & the actual trajectories (for tests only) interpolated at the dates of observations
%
% 1. Input:
%     <ref_trajectory>
%     epochs    = 4-vector of dates of observations
%     <actual_trajectory>
% 2. Outputs:
%     X26: 26-vector of the expected result for the vector of unknowns (km and km/s)

function X26 = expectedOD(TimeList0, NbLE0, TimeListE0, dist0, coord0, vel0, ...
                     epochs, bodies, ...
                     TimeList1, NbLE1, TimeListE1, dist1, coord1, vel1)
% tci=toc;
% Interpolation for the reference trajectory
out_coordinates0(:,1) = interp1(TimeList0, coord0(:,1), epochs, 'linear');
out_coordinates0(:,2) = interp1(TimeList0, coord0(:,2), epochs, 'linear');
out_coordinates0(:,3) = interp1(TimeList0, coord0(:,3), epochs, 'linear');
out_velocity0(:,1)    = interp1(TimeList0, vel0(:,1),   epochs, 'linear');
out_velocity0(:,2)    = interp1(TimeList0, vel0(:,2),   epochs, 'linear');
out_velocity0(:,3)    = interp1(TimeList0, vel0(:,3),   epochs, 'linear');
% Interpolation for the actual trajectory
out_coordinates1(:,1) = interp1(TimeList1, coord1(:,1), epochs, 'linear');
out_coordinates1(:,2) = interp1(TimeList1, coord1(:,2), epochs, 'linear');
out_coordinates1(:,3) = interp1(TimeList1, coord1(:,3), epochs, 'linear');
out_velocity1(:,1)    = interp1(TimeList1, vel1(:,1),   epochs, 'linear');
out_velocity1(:,2)    = interp1(TimeList1, vel1(:,2),   epochs, 'linear');
out_velocity1(:,3)    = interp1(TimeList1, vel1(:,3),   epochs, 'linear');
% mean difference of acceleration
Nobs=5; % ok, not very nice, I know!
acc0(1:Nobs-1,1:3)=(out_velocity0(2:Nobs,1:3)-out_velocity0(1:Nobs-1,1:3))./...
    repmat((86400.*(epochs(2:Nobs)-epochs(1:Nobs-1)))',1,3);
acc1(1:Nobs-1,1:3)=(out_velocity1(2:Nobs,1:3)-out_velocity1(1:Nobs-1,1:3))./...
    repmat((86400.*(epochs(2:Nobs)-epochs(1:Nobs-1)))',1,3);
dacc(1:3) = mean(acc1-acc0,1);

for ii=1:length(epochs)
    i=bodies(ii);
    out_distance0(ii) = interp1(TimeListE0(i,1:NbLE0(i)), dist0(i,1:NbLE0(i)), epochs(ii), 'linear');
    out_distance1(ii) = interp1(TimeListE1(i,1:NbLE1(i)), dist1(i,1:NbLE1(i)), epochs(ii), 'linear');
end

%Dvectr = out_coordinates0 - out_coordinates1; 
Dxyz = out_coordinates1 - out_coordinates0; % km
Dvelocity = (out_velocity1 - out_velocity0);  % km/s
drho = out_distance1 - out_distance0;
% tcf=toc; fprintf('expectedOD: %5.2f ms, ', (tcf-tci)*1000.);

X26 =[...
   Dxyz(1,1); Dxyz(1,2); Dxyz(1,3);...
   Dxyz(2,1); Dxyz(2,2); Dxyz(2,3);...
   Dxyz(3,1); Dxyz(3,2); Dxyz(3,3);...
   Dxyz(4,1); Dxyz(4,2); Dxyz(4,3);...
   Dxyz(5,1); Dxyz(5,2); Dxyz(5,3);...
   drho(1);...
   drho(2);...
   drho(3);...
   drho(4);...
   drho(5);...
   Dvelocity(1,1); Dvelocity(1,2); Dvelocity(1,3);...
   dacc(1); dacc(2); dacc(3)];
% X19 =[Dvectr(1,1);...
%    Dvectr(1,2);...
%    Dvectr(1,3);...
%    Dvectr(2,1);...
%    Dvectr(2,2);...
%    Dvectr(2,3);...
%    Dvectr(3,1);...
%    Dvectr(3,2);...
%    Dvectr(3,3);...
%    Dvectr(4,1);...
%    Dvectr(4,2);...
%    Dvectr(4,3);...
%    dr(1);...
%    dr(2);...
%    dr(3);...
%    dr(4);...
%    Dvelocity(1,1);...
%    Dvelocity(1,2);...
%    Dvelocity(1,3)];

end
